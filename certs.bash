#! /bin/bash
# source this file, or paste into .bash_aliases or whatever... 
# (working since 2017 on MacOS; with keytools installs)
#
# Create and sign per-host certificates for hostnames in /etc/hosts
# [using multiple ports on localhost]
#
# example from /etc/hosts:
# 127.0.0.1     lobby1.thegraid.com
# 127.0.0.2     lobby2.thegraid.com
# 127.0.0.3     lobby3.thegraid.com
# 127.0.0.4     game4.thegraid.com
# 127.0.0.5     game5.thegraid.com
# 127.0.0.6     game6.thegraid.com
# 127.0.0.7     game7.thegraid.com
# 127.0.0.1     rmi.thegraid.com
# the common domain is set in: ROOT_DOMAIN (for which we make a root certificate)
# ROOT_DOMAIN is set when: makekeys -r thegraid.com

# from chrome://setting (advanced) "Manage Certificates" (unlock Keychain)
# echo "double click and import to OSX 'system' keystore, trust for SSL"

# equivalent to: [?]
#sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ~/keys/$al.cer

#  -trustcacerts is irrelevant: we are just importing our own [root]cert
# if we bring in a cert generated by one of the cacerts, then it would be meaningful..?
# tell JVM to trust the root cert:
#sudo keytool -importcert -noprompt $usejcac -alias $al -file ~/keys/$al.cer

# for ng serve:
        # in angular.json:
        # "serve": {
        #   "builder": "@angular-devkit/build-angular:dev-server",
        #   "options": {
        #     "browserTarget": "gammaNg:build",
        #     "port": 8445,
        #     "host": "game4.thegraid.com",
        #     "ssl": true,
        #     "sslKey": "~/keys/game4.key.pem",
        #     "sslCert": "~/keys/game4.cert.pem"
        #   },

# :gammaNg> ng serve --ssl --ssl-key ~/keys/$al.key.pem --ssl-cert ~/keys/$al.cert.pem

## MacOS utility for DNS/hostname lookup
function host2() {
    dscacheutil -q host -a name $1
}

function printkey() {
    # $1 = alias name: game4
    local al=$1
    local pw=${3:-changeit}
    local myks="$(ls -d ~/keys)/keystore"
    local usemyks=" -keystore $myks -storepass $pw -keypass $pw "
    keytool $usemyks -export -alias $a1 | keytool -printcert
}

# FIRST: make root cert: makekeys -r graidroot thegraid.com 
#       (setting ENV vars for later reference)
# THEN: for each hostname in /etc/hosts to be used for HTTPS/WSS:
# hostkeys lobby1 lobby2 lobby3 game4 game5 game6 game7
#
function hostkeys() {
    local domain=${ROOT_DOMAIN:-thegraid.com}
    local pw=${KEYPASS:-changeit}
    local myks="$(ls -d ~/keys)/keystore"
    local usemyks=" -keystore $myks -storepass $pw -keypass $pw "
    # for Node.js, remove old NODE_EXTRA_CA_CERTS
    if [[ ! -z "$NODE_EXTRA_CA_CERTS" ]] ; then rm -f $NODE_EXTRA_CA_CERTS ; fi

    for alias in $* ; do
      makekeys $alias
    done
      keytool $usemyks -list
}

# 
# makekeys -r $rootalias $rootdomain
# makekeys -r graidroot thegraid.com
# makekeys game4

function makekeys() {
    local root=0
    if [ $1 == "-r" ] ; then
        root=1 ; shift
        if [ $1 == "-u" ] ; then # just set ENV and reuse the current root cert
            # note that root cert will expire in 90 days, so pro'ly need to recreate
            shift
            export ROOT_ALIAS=${1:-graidroot}
            export ROOT_DOMAIN=${2:-thegraid.com}
            echo "Using ROOT_ALIAS=$ROOT_ALIAS for ROOT_DOMAIN=$ROOT_DOMAIN"
            return
        fi
        export ROOT_DOMAIN=${2:-thegraid.com}
        # otherwise: generate a *new* root cert for $ROOT_DOMAIN
        echo "Doing root cert ($1) for ROOT_DOMAIN=$ROOT_DOMAIN"
    fi
    local domain=${ROOT_DOMAIN:-thegraid.com}
    # $1 alias
    # $2 CN (& SAN=dns)
    # $3 pw {:-changeit}
    local al=$1
    local cn=${2:-$al.$domain}
    local pw=${3:-changeit}
    local ipa=$(host2 $cn | grep ip_address | cut -d' ' -f2)
    local myks="$(ls -d ~/keys)/keystore"
    local usemyks=" -keystore $myks -storepass $pw -keypass $pw"
    local ks12="$(ls -d ~/keys)/keystore12"
    local useks12=" -keystore $ks12 -storepass $pw -keypass $pw "
    local jcac="$(ls $JAVA_HOME/jre/lib/security/cacerts)"
    local usejcac=" -keystore $jcac -storepass changeit -keypass $pw "
    echo "al=$al, cn=$cn, pw=$pw, ipa=$ipa"

    # keytool $usemks -list
    # echo usemyks="$usemyks"
    # mkdir -p ~/keys
    local SAN="dns:$cn,ip:$ipa"
    if [ $root == 1 ] ; then SAN=dns:$domain ; fi

    # remove pre-existing version of cert:
    keytool $usemyks -delete -alias $al ## > /dev/null
    #
    if [ $root == 0 ] ; then  
        # generate new keypair in $myks
        keytool $usemyks -genkey -alias $al -keyalg RSA -dname "CN=$cn" -ext SAN=$SAN
        signstore $al $cn
    else
        echo "remove prior root cert from Java cert authority"
        cp -p $(dirname $myks)/$al.cer "$(dirname $myks)/$(date -j)-$al.cer"
        echo "enter sudo password"
        sudo keytool -delete $usejcac -noprompt -alias $al
        echo "remove-trusted-cert from System.keychain"
        sudo security remove-trusted-cert -d $(dirname $myks)/$al.cer

        # generate new keypair in $myks, as a signing certificate
        keytool $usemyks -genkey -alias $al -keyalg RSA -dname "CN=$cn" -ext SAN=$SAN -ext BC=5
        export ROOT_ALIAS=$al
        # make a .cer file:
        keytool $usemyks -export -alias $al -file $(dirname $myks)/$al.cer

        echo "add $a1 to Java cacerts: sudo keytool $usejcac"
        keytool -exportcert $usemyks -alias $al | sudo keytool -importcert $usejcac -noprompt -alias $al

        echo "add-trusted-cert to System.keychain"
        sudo security add-trusted-cert -d -r trustRoot -p ssl -p basic -k /Library/Keychains/System.keychain $(dirname $myks)/$al.cer
        # remove-trusted-cert
        # https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/security.1.html
    fi 
}

function signstore() {
    # $1 alias
    # $2 CN (& SAN=dns)
    # $3 pw {:-changeit}
    local al=$1
    local cn=$2
    local pw=${3:-changeit}
    local ipa=$(host2 $cn | grep ip_address | cut -d' ' -f2)
    local myks="$(ls -d ~/keys)/keystore"
    local usemyks=" -keystore $myks -storepass $pw "
   
    keytool $usemyks -alias $al -certreq \
        | keytool $usemyks -alias $ROOT_ALIAS -gencert -ext SAN=dns:$cn,ip:$ipa \
        | keytool $usemyks -alias $al -importcert

    makepem $al $cn
}
function makepem() {
    # $1 alias
    # $2 CN (& SAN=dns)
    # $3 pw {:-changeit}
    local al=$1
    local cn=$2
    local pw=${3:-changeit}
    local ipa=$(host2 $cn | grep ip_address | cut -d' ' -f2)
    local myks="$(ls -d ~/keys)/keystore"
    local ks12="$(ls -d ~/keys)/keystore12"
    local useks12=" -keystore $ks12 -storepass $pw "
    local usemyks=" -keystore $myks -storepass $pw "

    rm -f $ks12
    # extract key & cert .pem files to ~/keys/ via ~/.keystore.p12
    keytool -importkeystore -srckeystore $myks -destkeystore $ks12 -deststoretype PKCS12 -srcalias $al \
            -deststorepass $pw -destkeypass $pw -srckeypass $pw -srcstorepass $pw
    openssl pkcs12 -in $ks12 -nokeys         -out ~/keys/$al.cert.pem -passin pass:$pw
    openssl pkcs12 -in $ks12 -nodes -nocerts -out ~/keys/$al.key.pem  -passin pass:$pw
    # add to $NODE_EXTRA_CA_CERTS if that's being used
    if [[ ! -z "$NODE_EXTRA_CA_CERTS" ]] ; then cat ~/keys/$al.cert.pem >> $NODE_EXTRA_CA_CERTS ; fi
}
function topcerts() {
    al=$1
    cn=${2:-$al.$ROOT_DOMAIN}
    pw=${3:-changeit}
    ipa=$(host2 $cn | grep ip_address | cut -d' ' -f2)
    myks="$(ls -d ~/keys)/keystore"
    usemyks=" -keystore $myks -storepass $pw -keypass $pw "
    ks12="$(ls -d ~/keys)/keystore12"
    useks12=" -keystore $ks12 -storepass $pw -keypass $pw "
    jcac="$(ls $JAVA_HOME/jre/lib/security/cacerts)"
    usejcac=" -keystore $jcac -storepass changeit -keypass $pw "
}
